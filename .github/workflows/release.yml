name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:
  release:
    name: Test
    runs-on: ubuntu-latest
    env:
      python-version: '3.8'
    steps:
      - uses: actions/checkout@v2
      - name: Get tag
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.python-version }}
      - name: Get Python version
        id: python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.3
        with:
          create_virtualenvs: 'true'
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project true
      - name: Create poetry.lock
        run: |
          poetry lock
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: poetry-venv-${{ runner.os }}-${{ steps.python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install
      - name: Create release ${{ steps.tag.outputs.tag }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          draft: 'false'
          prerelease: 'false'
      - name: Build and publish to PyPi
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --build
